// 17.5
// Миксин это такой же объект, как мы исп. во основном компоненте
// Он будет смержен с функционалом компонента, в который будет добавлен

// Подключение библ. lodash
import _ from 'lodash'

export default {
  data() {
    return {
      page: Number(this.$route.query.page) || 1, // Активная странице по дефолту. 17.14 Проверяем роут на наличие квери параметра, и устанавливаем page по квери параметру, если он есть в роуте
      pageSize: 5, // Количество элементов на странице
      pageCount: 0, // Количество страниц, по умолчанию 0. Это все элементы разделенные на количество элементов на странице
      allItems: [], // Здесь будут храниться все элементы в виде массива
      items: [], // Здесь будут хранить только те элементы, которые будут отображаться на текущей странице
    }
  },
  // Логика отображения необходимого подмасива активных элементов и массива всех элементов
  methods: {
    // Разбиваем все элементы на подмассивы с помощью библ. lodash и метод _.chunk
    // На вход функции подаем массив всех элементов
    // Эта мункция вызывается как метод в компоненте (см. History.vue // 17.4)
    setupPagination (allItems) {
      this.allItems = _.chunk(allItems, this.pageSize) // Разбиваем входящий массив на подмассивы по 5 элементов
      this.pageCount = _.size(this.allItems) // Количество страниц
      this.items = this.allItems[this.page - 1] || this.allItems[0] // Подмассив элементов активной страницы с проверкой на существование подмасива с активным    индексом
    },
    // 17.12
    // Метод, который будет вызываться при смене актиной страницы пагинации (см. :click-handler="pageChangeHandler")
    pageChangeHandler(page) {
      this.$router.push(`${this.$route.path}?page=${page}`) // 17.13 Добавление квери параметра в роут

      this.items = this.allItems[page - 1] || this.allItems[0] // Берем подмассив елементов по индексу равному активной странице пагинации минус 1
    }
  }
}